// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: proto/chatgo.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ChatGo_AddTask_FullMethodName = "/chatgo.ChatGo/AddTask"
)

// ChatGoClient is the client API for ChatGo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatGoClient interface {
	AddTask(ctx context.Context, in *AddTaskRequest, opts ...grpc.CallOption) (*AddTaskResponse, error)
}

type chatGoClient struct {
	cc grpc.ClientConnInterface
}

func NewChatGoClient(cc grpc.ClientConnInterface) ChatGoClient {
	return &chatGoClient{cc}
}

func (c *chatGoClient) AddTask(ctx context.Context, in *AddTaskRequest, opts ...grpc.CallOption) (*AddTaskResponse, error) {
	out := new(AddTaskResponse)
	err := c.cc.Invoke(ctx, ChatGo_AddTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatGoServer is the server API for ChatGo service.
// All implementations must embed UnimplementedChatGoServer
// for forward compatibility
type ChatGoServer interface {
	AddTask(context.Context, *AddTaskRequest) (*AddTaskResponse, error)
	mustEmbedUnimplementedChatGoServer()
}

// UnimplementedChatGoServer must be embedded to have forward compatible implementations.
type UnimplementedChatGoServer struct {
}

func (UnimplementedChatGoServer) AddTask(context.Context, *AddTaskRequest) (*AddTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTask not implemented")
}
func (UnimplementedChatGoServer) mustEmbedUnimplementedChatGoServer() {}

// UnsafeChatGoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatGoServer will
// result in compilation errors.
type UnsafeChatGoServer interface {
	mustEmbedUnimplementedChatGoServer()
}

func RegisterChatGoServer(s grpc.ServiceRegistrar, srv ChatGoServer) {
	s.RegisterService(&ChatGo_ServiceDesc, srv)
}

func _ChatGo_AddTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatGoServer).AddTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatGo_AddTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatGoServer).AddTask(ctx, req.(*AddTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatGo_ServiceDesc is the grpc.ServiceDesc for ChatGo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatGo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chatgo.ChatGo",
	HandlerType: (*ChatGoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTask",
			Handler:    _ChatGo_AddTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/chatgo.proto",
}
